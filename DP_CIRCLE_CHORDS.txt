

Given a number N, return number of ways you can draw N chords in a circle with 2*N points such that no 2 chords intersect.
Two ways are different if there exists a chord which is present in one way and not in other.

For example,

N=2
If points are numbered 1 to 4 in clockwise direction, then different ways to draw chords are:
{(1-2), (3-4)} and {(1-4), (2-3)}

So, we return 2.

Notes:

    1 ≤ N ≤ 1000
    Return answer modulo 109+7.



int Solution::chordCnt(int A){
    vector<long int>v(2*A);
    v[1]=1;
    int m=pow(10,9)+7;
   // cout<<m;
  
    for(int i=3;i<2*A;i=i+2)
    {
        long int sum=0;
        long int num=(2*v[i-2]%m);
        int x=i-2;
        int y=-1;
        while(x!=1)
        {
            
            sum=(sum%m+(((v[x-2]%m)*(v[y+2]%m))%m))%m;
            y=y+2;
            x=x-2;
            
           // cout<<num<<" "<<sum<<"\n";
        }
        sum=(num+sum)%m;
        
        
        v[i]=sum;
    }
    return (v[2*A-1]);
}
