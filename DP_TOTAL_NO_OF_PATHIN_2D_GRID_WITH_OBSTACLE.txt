

Given a grid of size m * n, lets assume you are starting at (1,1) and your goal is to reach (m,n).
 At any instance, if you are on (x,y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example :
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]

The total number of unique paths is 2.

    Note: m and n will be at most 100. 


int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) {
    
int row=A.size();
int col=A[0].size();
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            if(A[i][j]==1)A[i][j]=-1;
        }
    }
    if(A[0][0]!=-1)A[0][0]=1;
     for(int i=1;i<row;i++){if(A[i-1][0]!=-1&&A[i][0]!=-1){A[i][0]+=A[i-1][0];}}    
     for(int i=1;i<col;i++){if(A[0][i-1]!=-1&&A[0][i]!=-1){A[0][i]+=A[0][i-1];}}
     for(int i=1;i<row;i++)
    {
        for(int j=1;j<col;j++)
        {
            if(A[i][j]!=-1){
            if(A[i-1][j]!=-1&&A[i][j-1]!=-1)A[i][j]+=A[i-1][j]+A[i][j-1];
            if(A[i-1][j]!=-1&&A[i][j-1]==-1)A[i][j]+=A[i-1][j];
            if(A[i-1][j]==-1&&A[i][j-1]!=-1)A[i][j]+=A[i][j-1];
            }
        }
    }
    if(A[row-1][col-1]<0) return 0;
    return A[row-1][col-1];
}
