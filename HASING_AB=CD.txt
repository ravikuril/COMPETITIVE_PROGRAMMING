Given an array A of integers, find the index of values that satisfy A + B = C + D, where A,B,C & D are integers values in the array

Note:

1) Return the indices `A1 B1 C1 D1`, so that 
  A[A1] + A[B1] = A[C1] + A[D1]
  A1 < B1, C1 < D1
  A1 < C1, B1 != D1, B1 != C1 

2) If there are more than one solutions, 
   then return the tuple of values which are lexicographical smallest. 

Assume we have two solutions
S1 : A1 B1 C1 D1 ( these are values of indices int the array )  
S2 : A2 B2 C2 D2

S1 is lexicographically smaller than S2 iff
  A1 < A2 OR
  A1 = A2 AND B1 < B2 OR
  A1 = A2 AND B1 = B2 AND C1 < C2 OR 
  A1 = A2 AND B1 = B2 AND C1 = C2 AND D1 < D2

Example:

Input: [3, 4, 7, 1, 2, 9, 8]
Output: [0, 2, 3, 5] (O index)


vector<int> Solution::equal(vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

vector<int> r(4,INT_MAX);
vector<int> s;
vector<int> t(4);

int n=A.size();
int set=0;
map<int,pair<int,int> >hi;
for(int i=0;i<n;i++)
{
    for(int j=i+1;j<n;j++)
    {
        if(hi.find(A[i]+A[j])==hi.end()) hi[A[i]+A[j]]=make_pair(i,j);
    }
}
for(int i=0;i<n;i++)
{
    for(int j=i+1;j<n;j++)
    {
        if(hi.find(A[i]+A[j])!=hi.end())
        {
            pair<int,int> n =hi[A[i]+A[j]];
            if((i!=n.first)&&(i!=n.second)&&(j!=n.first)&&(j!=n.second))
            {
                t[0]=n.first;
                t[1]=n.second;
                t[2]=i;
                t[3]=j;
                if((r[0]>t[0])||(r[0]==t[0]&&r[1]>t[1])||(r[0]==t[0]&&r[1]==t[1]&&r[2]>t[2])
                ||(r[0]==t[0]&&r[1]==t[1]&&r[2]==t[2]&&r[3]>t[3]))
                {r=t; set=1;}
                
            }
        } 
                    
    }
}
if(set==1)return r;
else return s;
    
}
