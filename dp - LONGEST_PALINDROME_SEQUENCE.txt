 Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"

Output:

4

One possible longest palindromic subsequence is "bbbb".

Example 2:
Input:

"cbbd"

Output:

2



class Solution {
public:
    int longestPalindromeSubseq(string s) {
        vector<vector<int >> arr(s.length(),vector<int>(s.length()));
        int n=s.length();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
            if(i==j){arr[i][j]=1;}     
            }
        }
       int j=0;
        for(int i=0;i<n;i++)
        {
            for( int k=0,j=i+1;j<n and k<n;j++,k++)
            {
              if(s[k]==s[j]){arr[k][j]=max(arr[k][j-1],arr[k+1][j])+1;}
            else {arr[k][j]=max(arr[k][j-1],arr[k+1][j]);}
              if(s[k]==s[j]){arr[k][j]=arr[k+1][j-1]+2;}
            }
        }
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int m=0;m<n;m++)
            {
                //cout<<arr[i][m]<<" ";
            count+=arr[i][m];
            }
            //cout<<"\n";
        }
    return arr[0][n-1];
    }
};