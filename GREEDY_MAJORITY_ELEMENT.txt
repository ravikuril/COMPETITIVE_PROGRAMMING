

Given an array of size n, find the majority element. The majority element is the element that appears more than floor(n/2) times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example :

Input : [2, 1, 2]
Return  : 2 which occurs 2 times which is greater than 3/2. 


int Solution::majorityElement(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    int n=A.size();
    if(n==1) return A[0];
    
    vector<int >b(n);
    for(int i=0;i<n;i++)
    {
        b[i]=A[i];
    }
    sort(b.begin(),b.end());
    if(b[0]==b[n-1]) return b[0];
    int mid,left,right;
    if(n%2==0){mid=n/2-1; left=mid/2-1; right=mid/2-1+mid;}
    else {mid=n/2; left=mid/2;right=(mid/2)+mid;}
    
    if(b[mid]==b[right]) return b[right];
    if(b[mid]==b[left]) return b[left];
}
