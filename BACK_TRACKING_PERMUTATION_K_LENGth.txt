

Given two integers n and k, return all possible combinations of k numbers out of 1 2 3 ... n.

Make sure the combinations are sorted.

To elaborate,

    Within every entry, elements should be sorted. [1, 4] is a valid entry while [4, 1] is not.
    Entries should be sorted within themselves.

Example :
If n = 4 and k = 2, a solution is:

[
  [1,2],
  [1,3],
  [1,4],
  [2,3],
  [2,4],
  [3,4],
]

    Warning : DO NOT USE LIBRARY FUNCTION FOR GENERATING COMBINATIONS.
    Example : itertools.combinations in python.
    If you do, we will disqualify your submission retroactively and give you penalty points. 


int N=0;
vector<vector<int>>x;
    void fun(vector<int>&v,int k,int l,vector<int>&arr,int i)
    {
        if(l<=k){v.push_back(arr[i]);}
        if(l==k){x.push_back(v);v.pop_back();return;}
        for(int j=i+1;j<N;j++)
        {
            fun(v,k,l+1,arr,j);
        }
        v.pop_back();
    }
vector<vector<int> > Solution::combine(int n, int k) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    x.clear();
   if(n<k) return x;
  
    vector<int>arr(n);
    N=n;
    for(int i=0;i<n;i++){arr[i]=i+1;}
    vector<int>v;
    for(int i=0;i<n-k+1;i++)
    {
        fun(v,k,1,arr,i);
    }
    
    return x;
}
