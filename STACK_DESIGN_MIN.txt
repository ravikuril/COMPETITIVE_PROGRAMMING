 Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

class MinStack {
public:

vector <int> hi;
int top1=-1;
int min1=INT_MAX;
vector<int> m;
    
MinStack() {

   hi.clear();
   m.clear();
    hi=vector<int>(10000);
    m=vector<int>(10000);

}

void push(int x) {
    top1++;
    hi[top1]=x;
    if(min1<x) m[top1]=min1;
    else {min1=x;m[top1]=x;}

    
}

void pop() {
    
    if(top1>-1){top1--; if(top1!=-1)min1=m[top1];  else min1=INT_MAX;}
    
}

int top() {
    if(top1==-1) return -1;
    return hi[top1];
    
}

int getMin() {
    if(top1==-1) return -1;
    return m[top1];
}

};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */