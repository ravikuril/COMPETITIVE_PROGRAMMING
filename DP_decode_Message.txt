(DIRTY LOGIC)

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26

Given an encoded message containing digits, determine the total number of ways to decode it.

Example :

Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

int Solution::numDecodings(string A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
int n=A.length();
vector<long int>a(n);
if(n==1&&A[0]!='0') return 1;
if(n==1&&A[0]=='0'||A[0]=='0') return 0;
a[0]=1;
if(A[1]=='0')a[1]=1;
else if(((A[0]-'0')*10+(A[1]-'0'))<27)a[1]=2;
else a[1]=1;
if(A[1]=='0'&&A[0]=='1') return 1;
for(int i=2;i<n;i++)
    {   int a1=A[i]-'0';
        int b1=A[i-1]-'0';
        int c=-1;
        if(i+1<n)c=A[i+1]-'0';
        if(c==0&&(a1==1||a1==2)){a[i+2]=a[i-1]; i=i+2; continue;}
        if(a1==0&&(b1!=2&&b1!=1)) return 0;
        if((a1+b1*10)<27) a[i]=a[i-1]+a[i-2];
        else a[i]=a[i-1];
    }
return a[n-1];
    
}
