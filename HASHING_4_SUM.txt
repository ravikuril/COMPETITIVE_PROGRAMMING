

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

    Note:

        Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
        The solution set must not contain duplicate quadruplets.

Example :
Given array S = {1 0 -1 0 -2 2}, and target = 0
A solution set is:

    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
    (-1,  0, 0, 1)

Also make sure that the solution set is lexicographically sorted.
Solution[i] < Solution[j] iff Solution[i][0] < Solution[j][0] OR (Solution[i][0] == Solution[j][0] AND ... Solution[i][k] < Solution[j][k])




vector<vector<int> > Solution::fourSum(vector<int> &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    vector<vector<int>> yo;
    sort(A.begin(),A.end());
    int n=A.size();
    map<vector<int>,int >hi1;
   
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {     int v=A[i]+A[j];
              int num = B-v;
                int last=n-1;
                int start=j+1; 
               while(start<last)
                {
                    if((A[start]+A[last])==num)
                    {
                        //cout<<num<<" ";
                        vector<int>x;
                        x.push_back(A[i]);
                        x.push_back(A[j]);
                        x.push_back(A[start]);
                        x.push_back(A[last]);
                    
                    if(hi1.find(x)==hi1.end())
                    {
                        yo.push_back(x); hi1[x]=1;
                    }
                    start+=1;
                    
                    }
                
                    else if((A[start]+A[last])>num) {last=last-1;}
                    else start=start+1;
                 }
        }
    }
    return yo;
}
