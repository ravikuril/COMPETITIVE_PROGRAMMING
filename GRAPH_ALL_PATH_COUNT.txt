
Given a directed graph, a source vertex ‘s’ and a destination vertex ‘d’, print the count of all paths from given ‘s’ to ‘d’.

Input:
First line consists of T test cases. First line of every test case consists of V and E, denoting the vertices and edges. Second line of every test case consists of 2*E spaced integers denoting the edge between vertices. Third line of every test case consists of S and D.

Output:
Single line output, print the count of all paths from 's' to 'd'.

Constraints:
1<=T<=100
1<=V,E<=10

Example:
Input:
1
4 6
0 1 0 2 0 3 2 0 2 1 1 3
2 3
Output:
3

#include<iostream>
#include<stdio.h>
#include<vector>
#include<queue>
#include<utility>
using namespace std;
int output=0;
int des=0;
void dfs(int i,vector<int> &visit,vector<vector<int>>&arr)
{ //cout<<i;
    int k;
    visit[i]=1;
    for(int j=0;j<arr[i].size();j++)
    {
        k = arr[i][j];
        if(!visit[k])
        {
            if(k==des){//cout<<i<<" "<<j<<"\n";
            output++;}
            else dfs(k,visit,arr);
        }
    }
    visit[i]=0;
    }

int main()
 {
	int t;
	cin>>t;
	for(int j=0;j<t;j++)
	{
	    output=0;
	    int v,e;
	    cin>>v;
	    cin>>e;
	    vector<vector<int> >arr(v);
	    for(int i=0;i<e;i++)
        	{
	            int x,y;
	            cin>>x>>y;
	            arr[x].push_back(y);
	        }
	        
	    int a,b;
	    cin>>a>>b;
	    des=b;
	    if(a==b)
	    output++;
	    //cout<<output;
	    vector<int> visit(v);
	    dfs(a,visit,arr);
	   cout<<output<<"\n"; 
	}
	return 0;
}