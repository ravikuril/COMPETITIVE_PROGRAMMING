Combination Sum II

Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

    Note:

        All numbers (including target) will be positive integers.
        Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
        The solution set must not contain duplicate combinations.

Example :

Given candidate set 10,1,2,7,6,1,5 and target 8,

A solution set is:

[1, 7]
[1, 2, 5]
[2, 6]
[1, 1, 6]

    Warning : DO NOT USE LIBRARY FUNCTION FOR GENERATING COMBINATIONS.
    Example : itertools.combinations in python.
    If you do, we will disqualify your submission retroactively and give you penalty points. 



vector<vector<int>>x;
int B1=0;
void fun(vector<int>&v,int sum,vector<int>&A,int i)
{   
    if(sum>B1)return;
    if(sum<=B1){v.push_back(A[i]);}
    //for(int k=0;k<v.size();k++){cout<<v[k]<<" ";}
    //cout<<"\n";
    sum=sum+A[i];
    if(sum==B1){x.push_back(v);v.pop_back();return;}
    
    for(int j=i+1;j<A.size();j++)
    {   if((j-1)>=0&&A[j]==A[j-1]&&j-1>i)continue;
        fun(v,sum,A,j);
    }
    v.pop_back();
}


vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {

clear();
sort(A.begin(),A.end());
B1=B;
vector<int>v;
for(int i=0;i<A.size();i++)
{   if((i-1)>=0&&A[i]==A[i-1]) continue;
    fun(v,0,A,i);
}
    return x;
}

