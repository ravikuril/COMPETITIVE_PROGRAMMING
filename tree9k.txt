Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
For example:
Given the below binary tree and sum = 22,

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1

return

[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector< vector<int> > res;
    vector<int> v;
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        
        fun(root,0,sum);
        return res;
    }
    
    void fun(TreeNode* node,int sm,int sum)
    {
        if(!node )
            return ;
        
        sm+= node->val;
        v.push_back(node->val);
        if(node->left==NULL && node->right==NULL && sm==sum)
        {
            res.push_back(v);
        }
        else
        {
        fun(node->left,sm,sum);
        fun(node->right,sm,sum);
        }
        int n = v.size();
        
        v.resize(n-1);
        
        
    }
};