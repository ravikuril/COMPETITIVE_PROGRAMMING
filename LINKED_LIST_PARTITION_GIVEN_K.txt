86
Given a linked list and a value x, partition it such
 that all nodes less than x come before nodes greater 
than or equal to x.

You should preserve the original relative order of the nodes
 in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        
        if(head==NULL || head->next==NULL)
            return head;
        
        ListNode *st,*pt1,*pt2;
        st = head;
        pt1 = head->next;
        pt2 = head->next->next;
        if(pt1->val<x && st->val>=x)
        {
            st->next = pt1->next;
            pt1->next = st;
            st = pt1;
            head = st;
            pt1 = st->next;
        }
        if(pt2==NULL && pt1->val<x && st->val>=x)
        {
                pt1->next = st;
                st->next = NULL;
                return pt1;
        }
        head = st;
        while(pt2!=NULL)
        {
            while(st!=NULL && st->val<x && st->next!=NULL && st->next->val < x)
                st = st->next;
                
            if(pt2->val < x && pt1->val>=x)
            {
                if(st->val>=x)
                {
                    pt1->next = pt2->next;
                    pt2->next=st;
                    st=pt2;
                    head = st;
                }
                else
                {
                pt1->next = pt2->next;
                pt2->next = st->next;
                st->next = pt2;
                st = st->next;
                }
            }
            else
                pt1 = pt2;
                
            pt2=pt1->next;
            
        }
        
        return head;
    }
};